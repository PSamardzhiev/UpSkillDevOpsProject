name: CICD-GitHub-Actions

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.aws_access_key }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_key }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.aws_access_key }}
          aws-secret-access-key: ${{ secrets.aws_secret_key }}
          aws-region: us-east-1

      - name: Check for existing AMI
        id: ami_check
        run: |
          ami_id=$(aws ec2 describe-images --filters "Name=name,Values=telerik-demo-ami" --query 'Images[0].ImageId' --output text || echo "not_found")
          echo "Found AMI: $ami_id"
          echo "::set-output name=ami_id::$ami_id"

      - name: Install Packer if AMI not found and build the required AMI
        if: steps.ami_check.outputs.ami_id == 'None'
        run: |
          wget https://releases.hashicorp.com/packer/1.10.0/packer_1.10.0_linux_amd64.zip
          sudo unzip -o packer_1.10.0_linux_amd64.zip -d /usr/local/bin/
          cd packer
          packer init packer.pkr.hcl
          packer build packer.pkr.hcl

  terraform_checks:
    name: Terraform Checks
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Install Checkov with pip
        run: pip install checkov

      - name: Checkov Scan
        id: checkov
        run: |
          cd terraform
          checkov -d . || exit 0

      - name: Format Terraform Code
        run: |
          cd terraform
          terraform fmt -check -diff || exit 0

      - name: Terraform Validate
        id: validate
        run: |
          cd terraform
          terraform init
          terraform validate

  terraform_apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: terraform_checks
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          terraform init -upgrade
          terraform plan -out=tfplan

      - name: Terraform Apply
        id: apply
        run: |
          cd terraform
          terraform apply --auto-approve tfplan

  copy_to_s3:
    name: Copy to S3
    runs-on: ubuntu-latest
    needs: terraform_apply
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Copy tfstate, tfplan, and SSH key to the created S3 Bucket
        run: |
          cd terraform
          aws s3 cp terraform.tfstate s3://devops-tfm-s3-bucket-us-east-1a/terraform.tfstate
          aws s3 cp MyAWSKey.pem s3://devops-tfm-s3-bucket-us-east-1a/MyAWSKey.pem
          aws s3 cp tfplan s3://devops-tfm-s3-bucket-us-east-1a/tfplan
